source quicksort

function readints(integer x) to integer array
begin
    integer i;
    integer array a;
{
    a := array x;
    i := 0;
    while i < x do
        get a[i];
        i := i + 1
    end;}
    leave a
end

function writeints(integer array a, integer x)
begin
    {integer i;

    i := 0;
    while i < x do
        put a[i] . "\n";
        i := i + 1
    end}
    relax
end

function exch(integer array a, integer i, integer j)
begin
   { integer temp;

    temp := a[i];
    a[i] := a[j];
    a[j] := temp}
    relax
end

function less(integer a, integer b) to boolean
begin
    leave a < b
end

function partition(integer array a, integer lo, integer hi) to integer
begin
    integer i, j, v;

    {i := lo;
    j := hi + 1;
    v := a[lo];
    while i < j do
        i := i + 1;
        while less(a[i],  v) and (i <> hi) do
            i := i + 1
        end;
        j := j - 1;
        while less(v, a[j]) and (j <> lo) do
            j := j - 1
        end;
        if i < j then
            exch(a, i, j)
        end
    end;
    exch(a, lo, j);}
    leave j
end

function sort(integer array a, integer lo, integer hi)
begin
    {integer j;
    
    if hi <= lo then
        leave
    end;
    j := partition(a, lo, hi);
    sort(a, lo, j - 1);
    sort(a, j + 1, hi)}
    relax
end

begin
    integer x;
    integer array a;

    get x;
    a := readints(x);
    call sort(a, 0, x - 1);
    call writeints(a, x)
end
